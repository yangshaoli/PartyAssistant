1. createParty
	url:"/a/parties/createparty/"
	method:POST
	input:{
		"receivers":Array of Client Dict,
		"content":String of SMS Content,
		"_issendbyself":"0" or "1",
		"uID":Int,
		"addressType":"iphone" or "android"
		}
	output:Success- {
			"status":'ok',
			"description":"ok",
			"data":{
                		'partyId':Integer,
                		'applyURL':String
                		}
			}
		Error - {
			"status":'error',
			"description":Error Msg,
			"data":{}
			}
	ClientDict:{
			"cName":String,
			"cVal":Email/Phone Num
			"cId":Integer(iphone中Client的Id，需记录其ID，存在位置："iPhone")
			}
2. PartyList
	url:"/a/parties/partylist/(userid)/(start_id)/"
	method:GET
	input:{
		
		}
	output:{
		"status":"ok",
		"description":"ok",
		"dataSource":{
				"lastID":Integer,
				"partyList":PartyDictArray,
				}
		}

	PartyDict:{
			"clientsData":Dict
			"description":String,
			"partyId":int
			}

#1	start_id is the ID of the start query id, it will return the parties whose id is smaller than the start_id
	and it will also return the smallest id of the parties

#2	every party dict has a attr：
		clientsData{
			appliedClientcount:Integer,
			newAppliedClientcount:Integer,
			donothingClientcount:Integer,
			refusedClientcount:Integer,
			newRefusedClientcount:Integer,
		}
4. GetClientsCount:
	url:"/a/parties/get_party_client_main_count/(party id)/"
	method:GET
	input:{
		
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{
				"allClientcount": Integer,
				"appliedClientcount": Integer,
				"newAppliedClientcount":Integer,
				'refusedClientcount': Integer,
				'donothingClientcount':Integer,
				"newRefusedClientcount":Integer,
				}
		}

5. AccountRegist:
	url:"/a/accounts/regist/",
	method:POST,
	input:{
		"username":String(not null),
		"password":String(not null),
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{
				"uid":Integer
				}
		}

6. AccountLogin:
	url:"/a/accounts/login/",
	method:"POST",
	input:{
		"username":String(not null),
		"password":String(not null),
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{
				"uid":Integer,
				"name":String,
				}
		}

7. EditParty:
	url:"/a/parties/editparty/",
	method:"POST",
	input:{
		"partyID":Integer,
		"description":description,
		"uID":Integer
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{}
		}

8 DelParty:
	url:"/a/partie/deleteparty/",
	method:"POST",
	input:{
		"pID":Integer(party ID),
		"uID":Integer(user ID),
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{}
		}

9 GetPartyClientSeperatedList
	url:"/a/parties/get_party_client_seperated_list/(party id)/( type name)/",<party id> Integer   < type name > String of "all","applied","refused","donothing"
	method:"GET",
	input:{},
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{
				'clientList':Client Array
				'unreadCount':Integer
				}
		}
	Client Array:	[		
			{
                   	'cName':clientparty.client.name,
                   	'cValue':cValue,
                   	'backendID':clientparty.id,
                   	'status':clientparty.apply_status,
			'msg':String,
			'isCheck':BOOL,
                   	}
			]
10 ChangeClientStatus
	url:"/a/parties/change_client_status/"
	method:"POST",
	input:{
		"cpID":Integer(clientparty.id),
		"cpAction":"reject" or "apply"
		},
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{}
		}

11 resendMsg
	url:"/a/parties/resendmsg/"
	method:"POST",
	input:{
		"receivers":Array of Client Dict,
		"content":String of SMS Content,
		"_issendbyself":"0" or "1",
		"uID":Int,
		"addressType":"iphone" or "android",
		"partyID":Integer
		},
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{
                		'partyId':Integer,
                		'applyURL':String
                		}
		}