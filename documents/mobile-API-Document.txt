1. createParty
	url:"/a/parties/createparty/"
	method:POST
	input:{
		"receivers":Array of Client Dict,
		"content":String of SMS Content,
		"_issendbyself":"0" or "1",  #通过自己的手机发送（1） 还是通过服务器发送（0）
		"uID":Int,   #user ID
		"addressType":"iphone" or "android" #记录这是通过何种设备创建的
		}
	output:Success- {
			"status":'ok',
			"description":"ok",
			"data":{
                		'partyId':Integer,
                		'applyURL':String,（报名网页short URL）
				'sms_count_remaining':Integer,#剩余短信条数
                		},
			'iphone_version':IPHONE_APP_VERSION(String),#（如1.0 1.1 etc）
        		'android_version':ANDROID_APP_VERSION(String),#（如1.0 1.1 etc）
			}
		Error - {
			"status":'error',
			"description":Error Msg, #多用于Alert显示
			"data":{},
			'iphone_version':IPHONE_APP_VERSION(String),
            		'android_version':ANDROID_APP_VERSION(String),
			}
	ClientDict:{
			"cName":String,
			"cVal":Email/Phone Num
			"cId":Integer(iphone中Client的Id，需记录其ID，存在位置："iPhone")#现在没有用到，可删除
			}
			
2. PartyList
	url:"/a/parties/partylist/(userid)/(start_id)/"
	method:GET
	input:{
		
		}
	output:{
		"status":"ok",
		"description":"ok",
		"dataSource":{
				"lastID":Integer,#最后一条数据的party ID
				"partyList":PartyDictArray,
				},
		'iphone_version':IPHONE_APP_VERSION(String),
        	'android_version':ANDROID_APP_VERSION(String),
		}

	PartyDict:{
			"clientsData":Dict
			"description":String,
			"partyId":int,
			"type":"phone"/"email"
			}

#1	start_id is the ID of the start query id, it will return the parties whose id is smaller than the start_id
	and it will also return the smallest id of the parties. Default is 0, and it will return the latest 20 parties

#2	every party dict has a attr：
		clientsData{
			appliedClientcount:Integer,#已报名人数
			newAppliedClientcount:Integer,#新报名人数
			donothingClientcount:Integer,#未操作人数
			refusedClientcount:Integer,#拒绝报名人数
			newRefusedClientcount:Integer,#新拒绝报名人数
		}
		
4. GetClientsCount:
	url:"/a/parties/get_party_client_main_count/(party id)/"
	method:GET
	input:{
		
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{
				"allClientcount": Integer,#所有相关人数
				"appliedClientcount": Integer,
				"newAppliedClientcount":Integer,
				'refusedClientcount': Integer,
				'donothingClientcount':Integer,
				"newRefusedClientcount":Integer,
				"party_content":String,
				}
		}

5. AccountRegist:
	url:"/a/accounts/regist/",
	method:POST,
	input:{
		"username":String(not null),
		"password":String(not null),
                "device_token":String(not null)#如果取不到就置为空字符串
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{
				"uid":Integer
				}
		}

6. AccountLogin:
	url:"/a/accounts/login/",
	method:"POST",
	input:{
		"username":String(not null),
		"password":String(not null),
                "device_token":String(not null)
		}
	output:{
                "_israndomlogin":"0" or "1",（是否用临时密码登陆的）
		"status":"ok",
		"description":"ok",
		"datasource":{
				"uid":Integer,
				"name":String,
				"username":String,
				"user_remaining":Integer,
				}
		}

7. EditParty:
	url:"/a/parties/editparty/",
	method:"POST",
	input:{
		"partyID":Integer,
		"description":description,
		"uID":Integer
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{}
		}

8 DelParty:
	url:"/a/partie/deleteparty/",
	method:"POST",
	input:{
		"pID":Integer(party ID),
		"uID":Integer(user ID),
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{}
		}

9 GetPartyClientSeperatedList
	url:"/a/parties/get_party_client_seperated_list/(party id)/( type name)/",<party id> Integer   < type name > String of "all","applied","refused","donothing"
	method:"GET",
	input:{},
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{
				'clientList':Client Array
				'unreadCount':Integer
				}
		}
	Client Array:	[		
			{
                   	'cName':clientparty.client.name,
                   	'cValue':cValue,
                   	'backendID':clientparty.id,
                   	'status':clientparty.apply_status,  #"apply","refuse","noanswer "
			'msg':String,
			'isCheck':BOOL,#是否被查看过（是否需要标注新），True是被查看（不标注新），False是未被查看（标注新）
                   	}
			]
			
10 ChangeClientStatus
	url:"/a/parties/change_client_status/"
	method:"POST",
	input:{
		"cpID":Integer(clientparty.id),
		"cpAction":"reject" or "apply"
		},
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{}
		}

11 resendMsg
	url:"/a/parties/resendmsg/"
	method:"POST",
	input:{
		"receivers":Array of Client Dict,
		"content":String of SMS Content,
		"_issendbyself":"0" or "1",
		"uID":Int,
		"addressType":"iphone" or "android",
		"partyID":Integer
		},
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{
                		'partyId':Integer,
                		'applyURL':String,
				'sms_count_remaining':Integer,
                		}
		}
		
12. GetBadgeNumber:（查询有多少未读消息/提醒的方法）
        url:"/a/accounts/get_badge_num/?id=xx",
        method:"GET",
        input:{
                }
        output:{
                "status":"ok",
                "description":"ok",
                "datasource":{
                                "badgeNum":Integer,
                                }
                }
                
13. getAccountRemaining:（查询有多少余额）
        url:"/a/accounts/get_account_remaining/?id=xx",
        method:"GET",
        input:{
                }
        output:{
                "status":"ok",
                "description":"ok",
                "datasource":{
                                "remaining":Integer,
                                }
                }
                
14. forgetPassword:
	url:"/a/accounts/forget_password/",
	method:"POST",
	input:{
		"value":String(not null) #Email/手机号/用户名 均可
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{}
		}

14. changePassword:
	url:"/a/accounts/change_password/",
	method:"POST",
	input:{
		"uID":Int,
                "originalpassword":String(not null), #原始密码
                "newpassword":String(not null)  #新密码
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{}
		}


14. changePasswordrandomlogin:#使用临时密码时的修改密码
	url:"/a/accounts/change_password_random_login/",
	method:"POST",
	input:{
		"uID":Int,
                "newpassword":String(not null)  
		}
	output:{
		"status":"ok",
		"description":"ok",
		"datasource":{}
		}



		
15. AccountLogout:
        url:"/a/accounts/logout/",
        method:"POST",
        input:{
		"id":Integer
                }
        output:{
                "status":"ok",
                "description":"ok",
                "datasource":{
                                }
                }

16. bindPhone:
        url:"/a/accounts/bind/phone/",
        method:"POST",
        input:{
        	"uid":Integer,
        	"value":String(phone num),
                }
        output:{
                "status":"ok",
                "description":"ok",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error",
                "description":String to Show,#用于显示的字符串
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error_has_binded",
                "description":"",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                "status":"error_different_binded",
                "description":"您的账号已绑定了另一个手机号，请您解绑后再次绑定",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }

17. bindEmail:
        url:"/a/accounts/bind/email/",
        method:"POST",
        	input:{
        	"uid":Integer,
        	"value":String(email),
                }
        output:{
                "status":"ok",
                "description":"ok",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error",
                "description":String to Show,
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error_has_binded",
                "description":"",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                "status":"error_different_binded",
                "description":"您的账号已绑定了另一个邮箱，请您解绑后再次绑定",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }

18. unbindPhone:
        url:"/a/accounts/unbind/phone/",
        method:"POST",
        input:{
        	"uid":Integer,
        	"value":String(phone num),
                }
        output:{
                "status":"ok",
                "description":"ok",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error",
                "description":String to Show,
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error_different_unbinded",
                "description":"解除绑定失败，请重新解除绑定",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                
19. unbindEmail:
        url:"/a/accounts/unbind/email/",
        method:"POST",
        input:{
        	"uid":Integer,
        	"value":String(Email),
                }
        output:{
                "status":"ok",
                "description":"ok",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error",
                "description":String to Show,
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error_different_unbinded",
                "description":"解除绑定失败，请重新解除绑定",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                
20. verifyPhone:
        url:"/a/accounts/verify/bind/phone/",
        method:"POST",
        input:{
        "uid":Integer,
        "verifier":String,
                }
        output:{
                "status":"ok",
                "description":"ok",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error",
                "description":String to Show,
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error_has_binded_by_other",
                "description":"该手机号已被其他用户绑定，请重新输入手机号",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error_invalid_verifier",
                "description":"该验证码已经失效，请重新获取验证码",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }
                {
                "status":"error_wrong_verifier",
                "description":"验证码错误",
                "datasource":{
                                "latest_status":{'email':user.userprofile.email,
                                                'email_binding_status':'bind'/'unbind'/'waitingbind',
                                                'phone':user.userprofile.phone,
                                                'phone_binding_status':'bind'/'unbind'/'waitingbind',},
                                }
                }

21. bindDevice:#记录用户的device_token用于push notification
        url:"/a/accounts/bind_device/",
        method:"POST",
        input:{
        	"uid":Integer,
        	"device_token":String,
                }
        output:{
                "status":"ok",
                "description":"ok",
                "datasource":{}
                }

22. getFullPartyListInfoForAndroid:
    url:"/a/parties/an_partylist/(userid)/(start_id)/"
    method:GET
    input:{
        }
    output:{
        "status":"ok",
        "description":"ok",
        "dataSource":{
                "lastID":Integer,
                "partyList":PartyDictArray,
                },
        'iphone_version':IPHONE_APP_VERSION(String),
        'android_version':ANDROID_APP_VERSION(String),
        }

    PartyDict:{
            "clientsData":Dict
            "description":String,
            "partyId":int,
            "type":"phone"/"email",
            "appliedClients":[Client],
            "donothingClients":[Client],
            "refusedClients":[Client],
            }

#1  start_id is the ID of the start query id, it will return the parties whose id is smaller than the start_id
    and it will also return the smallest id of the parties

#2  every party dict has a attr：
        clientsData{
            appliedClientcount:Integer,
            newAppliedClientcount:Integer,
            donothingClientcount:Integer,
            refusedClientcount:Integer,
            newRefusedClientcount:Integer,
        }
#3 Client Content:
    {
    'name':clientparty.client.name,
    'number':phone,
    'id':clientparty.id,
    'comment':String,
    'isCheck':BOOL,
    }
    
23. createPartyForAndroid
    url:"/a/parties/an_createparty/"
    method:POST
    input:{
        "receivers":Array of Client Dict,
        "content":String of SMS Content,
        "_issendbyself":"0" or "1",
        "uID":Int,
        "addressType":"iphone" or "android"
        }
    output:Success- {
            "status":'ok',
            "description":"ok",
            "data":{
                        'partyId':Integer,
                        'applyURL':String,
                        'sms_count_remaining':Integer,
                        'clients':[ClientDict]
                        },
            'iphone_version':IPHONE_APP_VERSION(String),
            'android_version':ANDROID_APP_VERSION(String),
            }
        Error - {
            "status":'error',
            "description":Error Msg,
            "data":{},
            'iphone_version':IPHONE_APP_VERSION(String),
            'android_version':ANDROID_APP_VERSION(String),
            }
    ClientDict:{
            "name":String,
            "number":Email/Phone Num,
            "key":key(String),
            "id":Integer,
            }
11 resendMsg
    url:"/a/parties/resendmsg/"
    method:"POST",
    input:{
        "receivers":Array of Client Dict,
        "content":String of SMS Content,
        "_issendbyself":"0" or "1",
        "uID":Int,
        "addressType":"iphone" or "android",
        "partyID":Integer
        },
    output:{
        "status":"ok",
        "description":"ok",
        "datasource":{
                        'partyId':Integer,
                        'applyURL':String,
                        'sms_count_remaining':Integer,
                        'clients':[ClientDict]
                        }
        }
    ClientDict:{
            "name":String,
            "number":Email/Phone Num,
            "key":key(String),
            "id":Integer,
            }

12 saveNickName
    url:"/a/accounts/save_nickname/"
    method:"POST",
    input:{
        "uid":Int,
        "nickname":"String",
        },
    output:{
        "status":"ok",
        "description":"ok",
        "datasource":{
                        'nickname':nickName,
                	'remaining_sms_count':Integer,
                	'email':email,
                	'email_binding_status':'unbind'/'bind'/'waitingbind',
                	'phone':phone,
                	'phone_binding_status':'unbind'/'bind'/'waitingbind',
                        }
        }